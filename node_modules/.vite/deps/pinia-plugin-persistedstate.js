// node_modules/pinia-plugin-persistedstate/dist/chunk-WNM3IC4M.mjs
function isObject(v) {
  return typeof v === "object" && v !== null;
}
function normalizeOptions(options, factoryOptions) {
  options = isObject(options) ? options : /* @__PURE__ */ Object.create(null);
  return new Proxy(options, {
    get(target, key, receiver) {
      return Reflect.get(target, key, receiver) || Reflect.get(factoryOptions, key, receiver);
    }
  });
}
function get(state, path) {
  return path.reduce((obj, p) => {
    return obj == null ? void 0 : obj[p];
  }, state);
}
function set(state, path, val) {
  return path.slice(0, -1).reduce((obj, p) => {
    if (!/^(__proto__)$/.test(p))
      return obj[p] = obj[p] || {};
    else
      return {};
  }, state)[path[path.length - 1]] = val, state;
}
function pick(baseState, paths) {
  return paths.reduce((substate, path) => {
    const pathArray = path.split(".");
    return set(substate, pathArray, get(baseState, pathArray));
  }, {});
}
function hydrateStore(store, storage, serializer, key) {
  try {
    const fromStorage = storage == null ? void 0 : storage.getItem(key);
    if (fromStorage)
      store.$patch(serializer == null ? void 0 : serializer.deserialize(fromStorage));
  } catch (_error) {
  }
}
function createPersistedState(factoryOptions = {}) {
  return (context) => {
    const {
      options: { persist },
      store
    } = context;
    if (!persist)
      return;
    const persistences = (Array.isArray(persist) ? persist.map((p) => normalizeOptions(p, factoryOptions)) : [normalizeOptions(persist, factoryOptions)]).map(({
      storage = localStorage,
      beforeRestore = null,
      afterRestore = null,
      serializer = {
        serialize: JSON.stringify,
        deserialize: JSON.parse
      },
      key = store.$id,
      paths = null
    }) => ({
      storage,
      beforeRestore,
      afterRestore,
      serializer,
      key,
      paths
    }));
    persistences.forEach((p) => {
      const { storage, serializer, key, paths, beforeRestore, afterRestore } = p;
      beforeRestore == null ? void 0 : beforeRestore(context);
      hydrateStore(store, storage, serializer, key);
      afterRestore == null ? void 0 : afterRestore(context);
      store.$subscribe((_mutation, state) => {
        try {
          const toStore = Array.isArray(paths) ? pick(state, paths) : state;
          storage.setItem(key, serializer.serialize(toStore));
        } catch (_error) {
        }
      }, {
        detached: true
      });
    });
    store.$hydrate = ({ runHooks = true } = {}) => {
      persistences.forEach((p) => {
        const { beforeRestore, afterRestore, storage, serializer, key } = p;
        if (runHooks)
          beforeRestore == null ? void 0 : beforeRestore(context);
        hydrateStore(store, storage, serializer, key);
        if (runHooks)
          afterRestore == null ? void 0 : afterRestore(context);
      });
    };
  };
}

// node_modules/pinia-plugin-persistedstate/dist/index.mjs
var src_default = createPersistedState();

// dep:pinia-plugin-persistedstate
var pinia_plugin_persistedstate_default = src_default;
export {
  createPersistedState,
  pinia_plugin_persistedstate_default as default
};
//# sourceMappingURL=pinia-plugin-persistedstate.js.map
