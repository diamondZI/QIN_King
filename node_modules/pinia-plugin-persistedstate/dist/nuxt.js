"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/nuxt.ts
var nuxt_exports = {};
__export(nuxt_exports, {
  createNuxtPersistedState: () => createNuxtPersistedState
});
module.exports = __toCommonJS(nuxt_exports);

// src/core/normalize.ts
function isObject(v) {
  return typeof v === "object" && v !== null;
}
function normalizeOptions(options, factoryOptions) {
  options = isObject(options) ? options : /* @__PURE__ */ Object.create(null);
  return new Proxy(options, {
    get(target, key, receiver) {
      return Reflect.get(target, key, receiver) || Reflect.get(factoryOptions, key, receiver);
    }
  });
}

// src/core/pick.ts
function get(state, path) {
  return path.reduce((obj, p) => {
    return obj == null ? void 0 : obj[p];
  }, state);
}
function set(state, path, val) {
  return path.slice(0, -1).reduce((obj, p) => {
    if (!/^(__proto__)$/.test(p))
      return obj[p] = obj[p] || {};
    else
      return {};
  }, state)[path[path.length - 1]] = val, state;
}
function pick(baseState, paths) {
  return paths.reduce((substate, path) => {
    const pathArray = path.split(".");
    return set(substate, pathArray, get(baseState, pathArray));
  }, {});
}

// src/core/plugin.ts
function hydrateStore(store, storage, serializer, key) {
  try {
    const fromStorage = storage == null ? void 0 : storage.getItem(key);
    if (fromStorage)
      store.$patch(serializer == null ? void 0 : serializer.deserialize(fromStorage));
  } catch (_error) {
  }
}
function createPersistedState(factoryOptions = {}) {
  return (context) => {
    const {
      options: { persist },
      store
    } = context;
    if (!persist)
      return;
    const persistences = (Array.isArray(persist) ? persist.map((p) => normalizeOptions(p, factoryOptions)) : [normalizeOptions(persist, factoryOptions)]).map(({
      storage = localStorage,
      beforeRestore = null,
      afterRestore = null,
      serializer = {
        serialize: JSON.stringify,
        deserialize: JSON.parse
      },
      key = store.$id,
      paths = null
    }) => ({
      storage,
      beforeRestore,
      afterRestore,
      serializer,
      key,
      paths
    }));
    persistences.forEach((p) => {
      const { storage, serializer, key, paths, beforeRestore, afterRestore } = p;
      beforeRestore == null ? void 0 : beforeRestore(context);
      hydrateStore(store, storage, serializer, key);
      afterRestore == null ? void 0 : afterRestore(context);
      store.$subscribe((_mutation, state) => {
        try {
          const toStore = Array.isArray(paths) ? pick(state, paths) : state;
          storage.setItem(key, serializer.serialize(toStore));
        } catch (_error) {
        }
      }, {
        detached: true
      });
    });
    store.$hydrate = ({ runHooks = true } = {}) => {
      persistences.forEach((p) => {
        const { beforeRestore, afterRestore, storage, serializer, key } = p;
        if (runHooks)
          beforeRestore == null ? void 0 : beforeRestore(context);
        hydrateStore(store, storage, serializer, key);
        if (runHooks)
          afterRestore == null ? void 0 : afterRestore(context);
      });
    };
  };
}

// src/nuxt.ts
function createNuxtPersistedState(useCookie, factoryOptions) {
  return createPersistedState({
    storage: {
      getItem: (key) => {
        return useCookie(key, {
          encode: encodeURIComponent,
          decode: decodeURIComponent,
          ...factoryOptions == null ? void 0 : factoryOptions.cookieOptions
        }).value;
      },
      setItem: (key, value) => {
        useCookie(key, {
          encode: encodeURIComponent,
          decode: decodeURIComponent,
          ...factoryOptions == null ? void 0 : factoryOptions.cookieOptions
        }).value = value;
      }
    },
    ...factoryOptions
  });
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  createNuxtPersistedState
});
